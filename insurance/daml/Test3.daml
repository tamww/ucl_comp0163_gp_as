module Test3 where

--------------------------------------------------------------------------------

import DA.Date as D
import Daml.Script
import Main
import DA.Time (hours, days)

-------------------------------------------------------------------------------
----------Test 3: Functional Test on different branch conditions -------------

test3 : Script ()
test3 = script do

---- basic setup of environment ---------
cust_1 <- allocateParty "Customer_1"
insur <- allocateParty "Insurance_Company"
jury_1 <- allocateParty "Jury A"
jury_2 <- allocateParty "Jury B"
jury_3 <- allocateParty "Jury C"
police <- allocateParty "Police"
subrogationService <- allocateParty "Subrogation Service Provider"
guiltyPerson <- allocateParty "Person at guilt"

-- create user
_customer <- submit cust_1
  do createCmd Customer
      with
        user = cust_1
        userDetails = Userinfo with userID = "CUST001", name = "Julie", email = "julie@test.com"
---- basic setup of environment ---------


------ Test 3a. Test for accept and reject policy ------
-- create a policy request
_policyRequest <- submit cust_1
  do exerciseCmd _customer SubscribePolicy
      with
        insurer = insur
        startDate = (D.date 2023 Jan 1)
        endDate = (D.date 2024 Jan 1)
        customer = cust_1

-- approve the request
_policyCreated <- submit insur 
  do exerciseCmd _policyRequest AcceptApplication
  
-- create a policy request 2
_policyRequest_2 <- submit cust_1
  do exerciseCmd _customer SubscribePolicy
      with
        insurer = insur
        startDate = (D.date 2020 Jan 1)
        endDate = (D.date 2023 Jan 1)
        customer = cust_1

-- reject the request
_policyApplication_reject <- submit insur 
  do exerciseCmd _policyRequest_2 RejectApplication
------ Test 3a. Test for accept and reject policy ------


--------- claim process
-- submit a claim
_claimRequest <- submit cust_1
  do exerciseCmd _customer ApplyClaim
      with
        insurer = insur
        customer = cust_1
        cbPolicy = _policyCreated
        claimDate = (D.date 2023 Oct 1)
        evidence = [
          (Evidence with insurer = insur, description = "I being attacked", time = (D.datetime 2023 Oct 1 16 0 0), proof = "www.test.com"),
          (Evidence with insurer = insur, description = "I being attacked twice", time = (D.datetime 2023 Oct 2 17 0 0), proof = "www.test2.com")
          ]
        typeCB = Personal_Attack

-- accept a claim form and create jury session
_claimForm <- submit insur
  do exerciseCmd _claimRequest AcceptClaimRqeuest
      with
        cbType = Personal_Attack
        payAmt = 1.0
        upfrontPercentage = 0.1
        jury = [jury_1, jury_2, jury_3]
        police = [police]
        subrogationService = [subrogationService]

(_juryDecision, _claimForm_with_Jury) <- submit insur
  do exerciseCmd _claimForm CreateJuryDecision 
      with 
        claimForm = _claimForm
        duration = 1

-- -- add decision by jury
_jury_vote_1 <- submit jury_1
  do exerciseCmd _juryDecision Sign
      with 
        signer = jury_1
        vote = True

_jury_vote_2 <- submit jury_2
  do exerciseCmd _jury_vote_1 Sign
      with 
        signer = jury_2
        vote = True
let timeSlash = hours 2
------ Test 3b. Create slashing given one jury being inactive ------
(_slashing, _jury_vote_update) <- submit insur
    do exerciseCmd _jury_vote_2 RemoveJudge
        with
            judge = jury_3
            scaleFactor = 0.2
            slashDuration = timeSlash
------ Test 3b. Create slashing given one jury being inactive ------


return()

----------Test 3: End -----------------------------------------------
---------------------------------------------------------------------
